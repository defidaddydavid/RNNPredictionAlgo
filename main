import pandas as pd
import numpy as np
import backtrader as bt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import mplfinance as mpf
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Step 1: Data Collection
def get_crypto_data(ticker, start, end):
    data = yf.download(ticker, start=start, end=end, interval="1d")
    return data

# Fetching cryptocurrency data
btc_data = get_crypto_data("BTC-USD", start="2021-01-01", end="2022-12-31")
eth_data = get_crypto_data("ETH-USD", start="2021-01-01", end="2022-12-31")
bnb_data = get_crypto_data("BNB-USD", start="2021-01-01", end="2022-12-31")
sol_data = get_crypto_data("SOL-USD", start="2021-01-01", end="2022-12-31")

# Step 2: Feature Engineering
def add_technical_indicators(data):
    # Ichimoku Cloud calculations
    data['tenkan_sen'] = (data['High'].rolling(window=9).max() + data['Low'].rolling(window=9).min()) / 2
    data['kijun_sen'] = (data['High'].rolling(window=26).max() + data['Low'].rolling(window=26).min()) / 2
    data['senkou_span_a'] = ((data['tenkan_sen'] + data['kijun_sen']) / 2).shift(26)
    data['senkou_span_b'] = ((data['High'].rolling(window=52).max() + data['Low'].rolling(window=52).min()) / 2).shift(26)
    data['chikou_span'] = data['Close'].shift(-26)

    # MACD calculations
    data['ema12'] = data['Close'].ewm(span=12, adjust=False).mean()
    data['ema26'] = data['Close'].ewm(span=26, adjust=False).mean()
    data['macd'] = data['ema12'] - data['ema26']
    data['macd_signal'] = data['macd'].ewm(span=9, adjust=False).mean()

    # Chaikin Money Flow (CMF) calculation
    data['money_flow_multiplier'] = ((data['Close'] - data['Low']) - (data['High'] - data['Close'])) / (data['High'] - data['Low'])
    data['money_flow_volume'] = data['money_flow_multiplier'] * data['Volume']
    data['cmf'] = data['money_flow_volume'].rolling(window=20).sum() / data['Volume'].rolling(window=20).sum()

    return data

# Adding indicators to the data
btc_data = add_technical_indicators(btc_data)

# Step 3: Preparing Data for the RNN Model
def prepare_rnn_data(data, feature_columns, target_columns, time_steps=60):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data[feature_columns])
    
    X, y = [], []
    for i in range(time_steps, len(data)):
        X.append(scaled_data[i-time_steps:i])
        y.append(scaled_data[i, target_columns])
    
    X, y = np.array(X), np.array(y)
    return X, y, scaler

feature_columns = ['Open', 'High', 'Low', 'Close', 'tenkan_sen', 'kijun_sen', 'macd', 'macd_signal', 'cmf']
target_columns = [0, 1, 2, 3]  # Predicting Open, High, Low, Close of the next candle
X, y, scaler = prepare_rnn_data(btc_data, feature_columns, target_columns)

# Step 4: Building the RNN Model
def build_rnn_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dense(units=25))
    model.add(Dense(units=4))  # Predicting Open, High, Low, Close
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

model = build_rnn_model((X.shape[1], X.shape[2]))

# Step 5: Train the Model
model.fit(X, y, epochs=10, batch_size=32)

# Step 6: Predicting the Next Candle
def predict_next_candle(model, data, scaler, feature_columns, time_steps=60):
    last_data = data[feature_columns].iloc[-time_steps:]
    scaled_last_data = scaler.transform(last_data)
    scaled_last_data = np.array(scaled_last_data).reshape(1, time_steps, len(feature_columns))
    predicted_scaled = model.predict(scaled_last_data)
    predicted = scaler.inverse_transform(np.hstack([predicted_scaled, np.zeros((predicted_scaled.shape[0], len(feature_columns) - predicted_scaled.shape[1]))]))
    return predicted[:, :4]  # Returning Open, High, Low, Close

next_candle = predict_next_candle(model, btc_data, scaler, feature_columns)
print(f"Predicted next candle (Open, High, Low, Close): {next_candle}")

# Step 7: Backtesting with Backtrader
class CryptoStrategy(bt.Strategy):
    params = (
        ('rnn_model', None),
        ('scaler', None),
        ('time_steps', 60),
        ('feature_columns', None),
    )

    def __init__(self):
        self.dataclose = self.datas[0].close
        self.rnn_model = self.params.rnn_model
        self.scaler = self.params.scaler
        self.time_steps = self.params.time_steps
        self.feature_columns = self.params.feature_columns
        self.data_history = []
        self.predictions = []  # Store predictions
        self.actuals = []      # Store actual OHLC values

    def next(self):
        # Append the latest data to history
        self.data_history.append([self.datas[0].open[0], self.datas[0].high[0], self.datas[0].low[0], self.dataclose[0]])

        if len(self.data_history) >= self.time_steps:
            # Prepare data for prediction
            input_data = pd.DataFrame(self.data_history[-self.time_steps:], columns=['Open', 'High', 'Low', 'Close'])
            scaled_data = self.scaler.transform(input_data)
            scaled_data = np.array(scaled_data).reshape(1, self.time_steps, len(self.feature_columns))
            predicted_candle = self.rnn_model.predict(scaled_data)
            predicted_candle = self.scaler.inverse_transform(
                np.hstack([predicted_candle, np.zeros((predicted_candle.shape[0], len(self.feature_columns) - predicted_candle.shape[1]))])
            )
            predicted_ohlc = predicted_candle[0, :4]
            self.predictions.append(predicted_ohlc)
            self.actuals.append([self.datas[0].open[0], self.datas[0].high[0], self.datas[0].low[0], self.dataclose[0]])

            # Implement the trading logic based on predicted close price
            if predicted_ohlc[3] > self.dataclose[0]:
                # Buy signal
                if not self.position:
                    self.buy()
            elif predicted_ohlc[3] < self.dataclose[0]:
                # Sell signal
                if self.position:
                    self.sell()

# Running Backtest
cerebro = bt.Cerebro()
data_feed = bt.feeds.PandasData(dataname=btc_data)
cerebro.adddata(data_feed)
strategy = cerebro.addstrategy(CryptoStrategy, rnn_model=model, scaler=scaler, feature_columns=feature_columns)
cerebro.run()

# Plotting the predictions vs actual
strategy = strategy[0]  # Get strategy instance
predictions = np.array(strategy.predictions)
actuals = np.array(strategy.actuals)

# Creating DataFrames for comparison
pred_df = pd.DataFrame(predictions, columns=['Open', 'High', 'Low', 'Close'])
actual_df = pd.DataFrame(actuals, columns=['Open', 'High', 'Low', 'Close'])

# Plotting with Matplotlib
fig, ax = plt.subplots(2, 1, figsize=(12, 8))

ax[0].plot(pred_df['Close'], label='Predicted Close', color='blue')
ax[0].plot(actual_df['Close'], label='Actual Close', color='red')
ax[0].set_title('Predicted vs Actual Close Prices')
ax[0].legend()

# Using mplfinance to create candlestick chart
candles_data = actual_df.copy()
candles_data.index = btc_data.index[-len(actual_df):]  # Aligning index for correct plotting
mpf.plot(candles_data, type='candle', title='Actual Candlestick Chart', style='charles', ax=ax[1])

plt.tight_layout()
plt.show()

# Calculating Accuracy Metrics
mae = mean_absolute_error(actual_df['Close'], pred_df['Close'])
mse = mean_squared_error(actual_df['Close'], pred_df['Close'])
print(f"MAE: {mae}, MSE: {mse}")

# Summary
# 1. Modified the backtesting to store predicted and actual values.
# 2. Added a visualization to show the predicted vs actual close values and a candlestick representation of the actual data.
# 3. Calculated accuracy metrics (MAE and MSE) to evaluate the model's performance.
